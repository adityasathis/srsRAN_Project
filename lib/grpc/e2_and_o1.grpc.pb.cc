// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: e2_and_o1.proto

#include "e2_and_o1.pb.h"
#include "e2_and_o1.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mypackage {

static const char* MyService_method_names[] = {
  "/mypackage.MyService/ServerToClientStream",
  "/mypackage.MyService/ClientToServer",
};

std::unique_ptr< MyService::Stub> MyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyService::Stub> stub(new MyService::Stub(channel, options));
  return stub;
}

MyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ServerToClientStream_(MyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ClientToServer_(MyService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::mypackage::StreamResponse>* MyService::Stub::ServerToClientStreamRaw(::grpc::ClientContext* context, const ::mypackage::StreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mypackage::StreamResponse>::Create(channel_.get(), rpcmethod_ServerToClientStream_, context, request);
}

void MyService::Stub::async::ServerToClientStream(::grpc::ClientContext* context, const ::mypackage::StreamRequest* request, ::grpc::ClientReadReactor< ::mypackage::StreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mypackage::StreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerToClientStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mypackage::StreamResponse>* MyService::Stub::AsyncServerToClientStreamRaw(::grpc::ClientContext* context, const ::mypackage::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mypackage::StreamResponse>::Create(channel_.get(), cq, rpcmethod_ServerToClientStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mypackage::StreamResponse>* MyService::Stub::PrepareAsyncServerToClientStreamRaw(::grpc::ClientContext* context, const ::mypackage::StreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mypackage::StreamResponse>::Create(channel_.get(), cq, rpcmethod_ServerToClientStream_, context, request, false, nullptr);
}

::grpc::Status MyService::Stub::ClientToServer(::grpc::ClientContext* context, const ::mypackage::MatrixRequest& request, ::mypackage::MatrixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mypackage::MatrixRequest, ::mypackage::MatrixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientToServer_, context, request, response);
}

void MyService::Stub::async::ClientToServer(::grpc::ClientContext* context, const ::mypackage::MatrixRequest* request, ::mypackage::MatrixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mypackage::MatrixRequest, ::mypackage::MatrixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientToServer_, context, request, response, std::move(f));
}

void MyService::Stub::async::ClientToServer(::grpc::ClientContext* context, const ::mypackage::MatrixRequest* request, ::mypackage::MatrixResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientToServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mypackage::MatrixResponse>* MyService::Stub::PrepareAsyncClientToServerRaw(::grpc::ClientContext* context, const ::mypackage::MatrixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mypackage::MatrixResponse, ::mypackage::MatrixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientToServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mypackage::MatrixResponse>* MyService::Stub::AsyncClientToServerRaw(::grpc::ClientContext* context, const ::mypackage::MatrixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientToServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

MyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MyService::Service, ::mypackage::StreamRequest, ::mypackage::StreamResponse>(
          [](MyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mypackage::StreamRequest* req,
             ::grpc::ServerWriter<::mypackage::StreamResponse>* writer) {
               return service->ServerToClientStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyService::Service, ::mypackage::MatrixRequest, ::mypackage::MatrixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mypackage::MatrixRequest* req,
             ::mypackage::MatrixResponse* resp) {
               return service->ClientToServer(ctx, req, resp);
             }, this)));
}

MyService::Service::~Service() {
}

::grpc::Status MyService::Service::ServerToClientStream(::grpc::ServerContext* context, const ::mypackage::StreamRequest* request, ::grpc::ServerWriter< ::mypackage::StreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyService::Service::ClientToServer(::grpc::ServerContext* context, const ::mypackage::MatrixRequest* request, ::mypackage::MatrixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mypackage

