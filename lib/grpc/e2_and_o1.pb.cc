// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: e2_and_o1.proto

#include "e2_and_o1.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace mypackage {
template <typename>
PROTOBUF_CONSTEXPR StreamRequest::StreamRequest(
    ::_pbi::ConstantInitialized) {}
struct StreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRequestDefaultTypeInternal() {}
  union {
    StreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamResponse::StreamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variable1_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.variable3_)*/ 0

  , /*decltype(_impl_.variable2_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamResponseDefaultTypeInternal() {}
  union {
    StreamResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamResponseDefaultTypeInternal _StreamResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UeMaxPrbAllocation::UeMaxPrbAllocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_prb_allocation_)*/ 0

  , /*decltype(_impl_.ue_index_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UeMaxPrbAllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UeMaxPrbAllocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UeMaxPrbAllocationDefaultTypeInternal() {}
  union {
    UeMaxPrbAllocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UeMaxPrbAllocationDefaultTypeInternal _UeMaxPrbAllocation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MatrixRequest::MatrixRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ue_max_prb_allocations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatrixRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatrixRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatrixRequestDefaultTypeInternal() {}
  union {
    MatrixRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatrixRequestDefaultTypeInternal _MatrixRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MatrixResponse::MatrixResponse(
    ::_pbi::ConstantInitialized) {}
struct MatrixResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatrixResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatrixResponseDefaultTypeInternal() {}
  union {
    MatrixResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatrixResponseDefaultTypeInternal _MatrixResponse_default_instance_;
}  // namespace mypackage
static ::_pb::Metadata file_level_metadata_e2_5fand_5fo1_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_e2_5fand_5fo1_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_e2_5fand_5fo1_2eproto = nullptr;
const ::uint32_t TableStruct_e2_5fand_5fo1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mypackage::StreamRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mypackage::StreamResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mypackage::StreamResponse, _impl_.variable1_),
    PROTOBUF_FIELD_OFFSET(::mypackage::StreamResponse, _impl_.variable2_),
    PROTOBUF_FIELD_OFFSET(::mypackage::StreamResponse, _impl_.variable3_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mypackage::UeMaxPrbAllocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mypackage::UeMaxPrbAllocation, _impl_.ue_index_),
    PROTOBUF_FIELD_OFFSET(::mypackage::UeMaxPrbAllocation, _impl_.max_prb_allocation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mypackage::MatrixRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mypackage::MatrixRequest, _impl_.ue_max_prb_allocations_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mypackage::MatrixResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::mypackage::StreamRequest)},
        { 8, -1, -1, sizeof(::mypackage::StreamResponse)},
        { 19, -1, -1, sizeof(::mypackage::UeMaxPrbAllocation)},
        { 29, -1, -1, sizeof(::mypackage::MatrixRequest)},
        { 38, -1, -1, sizeof(::mypackage::MatrixResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mypackage::_StreamRequest_default_instance_._instance,
    &::mypackage::_StreamResponse_default_instance_._instance,
    &::mypackage::_UeMaxPrbAllocation_default_instance_._instance,
    &::mypackage::_MatrixRequest_default_instance_._instance,
    &::mypackage::_MatrixResponse_default_instance_._instance,
};
const char descriptor_table_protodef_e2_5fand_5fo1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017e2_and_o1.proto\022\tmypackage\"\017\n\rStreamRe"
    "quest\"I\n\016StreamResponse\022\021\n\tvariable1\030\001 \001"
    "(\t\022\021\n\tvariable2\030\002 \001(\005\022\021\n\tvariable3\030\003 \001(\001"
    "\"B\n\022UeMaxPrbAllocation\022\020\n\010ue_index\030\001 \001(\005"
    "\022\032\n\022max_prb_allocation\030\002 \001(\001\"N\n\rMatrixRe"
    "quest\022=\n\026ue_max_prb_allocations\030\001 \003(\0132\035."
    "mypackage.UeMaxPrbAllocation\"\020\n\016MatrixRe"
    "sponse2\241\001\n\tMyService\022M\n\024ServerToClientSt"
    "ream\022\030.mypackage.StreamRequest\032\031.mypacka"
    "ge.StreamResponse0\001\022E\n\016ClientToServer\022\030."
    "mypackage.MatrixRequest\032\031.mypackage.Matr"
    "ixResponseb\006proto3"
};
static ::absl::once_flag descriptor_table_e2_5fand_5fo1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_e2_5fand_5fo1_2eproto = {
    false,
    false,
    458,
    descriptor_table_protodef_e2_5fand_5fo1_2eproto,
    "e2_and_o1.proto",
    &descriptor_table_e2_5fand_5fo1_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_e2_5fand_5fo1_2eproto::offsets,
    file_level_metadata_e2_5fand_5fo1_2eproto,
    file_level_enum_descriptors_e2_5fand_5fo1_2eproto,
    file_level_service_descriptors_e2_5fand_5fo1_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_e2_5fand_5fo1_2eproto_getter() {
  return &descriptor_table_e2_5fand_5fo1_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_e2_5fand_5fo1_2eproto(&descriptor_table_e2_5fand_5fo1_2eproto);
namespace mypackage {
// ===================================================================

class StreamRequest::_Internal {
 public:
};

StreamRequest::StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mypackage.StreamRequest)
}
StreamRequest::StreamRequest(const StreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StreamRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mypackage.StreamRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_e2_5fand_5fo1_2eproto_getter, &descriptor_table_e2_5fand_5fo1_2eproto_once,
      file_level_metadata_e2_5fand_5fo1_2eproto[0]);
}
// ===================================================================

class StreamResponse::_Internal {
 public:
};

StreamResponse::StreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mypackage.StreamResponse)
}
StreamResponse::StreamResponse(const StreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variable1_) {}

    , decltype(_impl_.variable3_) {}

    , decltype(_impl_.variable2_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.variable1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.variable1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_variable1().empty()) {
    _this->_impl_.variable1_.Set(from._internal_variable1(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.variable3_, &from._impl_.variable3_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.variable2_) -
    reinterpret_cast<char*>(&_impl_.variable3_)) + sizeof(_impl_.variable2_));
  // @@protoc_insertion_point(copy_constructor:mypackage.StreamResponse)
}

inline void StreamResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variable1_) {}

    , decltype(_impl_.variable3_) { 0 }

    , decltype(_impl_.variable2_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.variable1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.variable1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamResponse::~StreamResponse() {
  // @@protoc_insertion_point(destructor:mypackage.StreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable1_.Destroy();
}

void StreamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mypackage.StreamResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable1_.ClearToEmpty();
  ::memset(&_impl_.variable3_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.variable2_) -
      reinterpret_cast<char*>(&_impl_.variable3_)) + sizeof(_impl_.variable2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string variable1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_variable1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mypackage.StreamResponse.variable1"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 variable2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.variable2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double variable3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.variable3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mypackage.StreamResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable1 = 1;
  if (!this->_internal_variable1().empty()) {
    const std::string& _s = this->_internal_variable1();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mypackage.StreamResponse.variable1");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 variable2 = 2;
  if (this->_internal_variable2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_variable2(), target);
  }

  // double variable3 = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_variable3 = this->_internal_variable3();
  ::uint64_t raw_variable3;
  memcpy(&raw_variable3, &tmp_variable3, sizeof(tmp_variable3));
  if (raw_variable3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_variable3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mypackage.StreamResponse)
  return target;
}

::size_t StreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mypackage.StreamResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable1 = 1;
  if (!this->_internal_variable1().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_variable1());
  }

  // double variable3 = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_variable3 = this->_internal_variable3();
  ::uint64_t raw_variable3;
  memcpy(&raw_variable3, &tmp_variable3, sizeof(tmp_variable3));
  if (raw_variable3 != 0) {
    total_size += 9;
  }

  // int32 variable2 = 2;
  if (this->_internal_variable2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_variable2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamResponse::GetClassData() const { return &_class_data_; }


void StreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamResponse*>(&to_msg);
  auto& from = static_cast<const StreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mypackage.StreamResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_variable1().empty()) {
    _this->_internal_set_variable1(from._internal_variable1());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_variable3 = from._internal_variable3();
  ::uint64_t raw_variable3;
  memcpy(&raw_variable3, &tmp_variable3, sizeof(tmp_variable3));
  if (raw_variable3 != 0) {
    _this->_internal_set_variable3(from._internal_variable3());
  }
  if (from._internal_variable2() != 0) {
    _this->_internal_set_variable2(from._internal_variable2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamResponse::CopyFrom(const StreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mypackage.StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamResponse::IsInitialized() const {
  return true;
}

void StreamResponse::InternalSwap(StreamResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.variable1_, lhs_arena,
                                       &other->_impl_.variable1_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamResponse, _impl_.variable2_)
      + sizeof(StreamResponse::_impl_.variable2_)
      - PROTOBUF_FIELD_OFFSET(StreamResponse, _impl_.variable3_)>(
          reinterpret_cast<char*>(&_impl_.variable3_),
          reinterpret_cast<char*>(&other->_impl_.variable3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_e2_5fand_5fo1_2eproto_getter, &descriptor_table_e2_5fand_5fo1_2eproto_once,
      file_level_metadata_e2_5fand_5fo1_2eproto[1]);
}
// ===================================================================

class UeMaxPrbAllocation::_Internal {
 public:
};

UeMaxPrbAllocation::UeMaxPrbAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mypackage.UeMaxPrbAllocation)
}
UeMaxPrbAllocation::UeMaxPrbAllocation(const UeMaxPrbAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mypackage.UeMaxPrbAllocation)
}

inline void UeMaxPrbAllocation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_prb_allocation_) { 0 }

    , decltype(_impl_.ue_index_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UeMaxPrbAllocation::~UeMaxPrbAllocation() {
  // @@protoc_insertion_point(destructor:mypackage.UeMaxPrbAllocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UeMaxPrbAllocation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UeMaxPrbAllocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UeMaxPrbAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:mypackage.UeMaxPrbAllocation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_prb_allocation_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ue_index_) -
      reinterpret_cast<char*>(&_impl_.max_prb_allocation_)) + sizeof(_impl_.ue_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeMaxPrbAllocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ue_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.ue_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double max_prb_allocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.max_prb_allocation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UeMaxPrbAllocation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mypackage.UeMaxPrbAllocation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ue_index = 1;
  if (this->_internal_ue_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_ue_index(), target);
  }

  // double max_prb_allocation = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_max_prb_allocation = this->_internal_max_prb_allocation();
  ::uint64_t raw_max_prb_allocation;
  memcpy(&raw_max_prb_allocation, &tmp_max_prb_allocation, sizeof(tmp_max_prb_allocation));
  if (raw_max_prb_allocation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_max_prb_allocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mypackage.UeMaxPrbAllocation)
  return target;
}

::size_t UeMaxPrbAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mypackage.UeMaxPrbAllocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_prb_allocation = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_max_prb_allocation = this->_internal_max_prb_allocation();
  ::uint64_t raw_max_prb_allocation;
  memcpy(&raw_max_prb_allocation, &tmp_max_prb_allocation, sizeof(tmp_max_prb_allocation));
  if (raw_max_prb_allocation != 0) {
    total_size += 9;
  }

  // int32 ue_index = 1;
  if (this->_internal_ue_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_ue_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UeMaxPrbAllocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UeMaxPrbAllocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UeMaxPrbAllocation::GetClassData() const { return &_class_data_; }


void UeMaxPrbAllocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UeMaxPrbAllocation*>(&to_msg);
  auto& from = static_cast<const UeMaxPrbAllocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mypackage.UeMaxPrbAllocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_max_prb_allocation = from._internal_max_prb_allocation();
  ::uint64_t raw_max_prb_allocation;
  memcpy(&raw_max_prb_allocation, &tmp_max_prb_allocation, sizeof(tmp_max_prb_allocation));
  if (raw_max_prb_allocation != 0) {
    _this->_internal_set_max_prb_allocation(from._internal_max_prb_allocation());
  }
  if (from._internal_ue_index() != 0) {
    _this->_internal_set_ue_index(from._internal_ue_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UeMaxPrbAllocation::CopyFrom(const UeMaxPrbAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mypackage.UeMaxPrbAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeMaxPrbAllocation::IsInitialized() const {
  return true;
}

void UeMaxPrbAllocation::InternalSwap(UeMaxPrbAllocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UeMaxPrbAllocation, _impl_.ue_index_)
      + sizeof(UeMaxPrbAllocation::_impl_.ue_index_)
      - PROTOBUF_FIELD_OFFSET(UeMaxPrbAllocation, _impl_.max_prb_allocation_)>(
          reinterpret_cast<char*>(&_impl_.max_prb_allocation_),
          reinterpret_cast<char*>(&other->_impl_.max_prb_allocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UeMaxPrbAllocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_e2_5fand_5fo1_2eproto_getter, &descriptor_table_e2_5fand_5fo1_2eproto_once,
      file_level_metadata_e2_5fand_5fo1_2eproto[2]);
}
// ===================================================================

class MatrixRequest::_Internal {
 public:
};

MatrixRequest::MatrixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mypackage.MatrixRequest)
}
MatrixRequest::MatrixRequest(const MatrixRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatrixRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ue_max_prb_allocations_){from._impl_.ue_max_prb_allocations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mypackage.MatrixRequest)
}

inline void MatrixRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ue_max_prb_allocations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatrixRequest::~MatrixRequest() {
  // @@protoc_insertion_point(destructor:mypackage.MatrixRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatrixRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ue_max_prb_allocations()->~RepeatedPtrField();
}

void MatrixRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatrixRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mypackage.MatrixRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ue_max_prb_allocations()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatrixRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mypackage.UeMaxPrbAllocation ue_max_prb_allocations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_max_prb_allocations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MatrixRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mypackage.MatrixRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mypackage.UeMaxPrbAllocation ue_max_prb_allocations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ue_max_prb_allocations_size()); i < n; i++) {
    const auto& repfield = this->_internal_ue_max_prb_allocations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mypackage.MatrixRequest)
  return target;
}

::size_t MatrixRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mypackage.MatrixRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mypackage.UeMaxPrbAllocation ue_max_prb_allocations = 1;
  total_size += 1UL * this->_internal_ue_max_prb_allocations_size();
  for (const auto& msg : this->_internal_ue_max_prb_allocations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatrixRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatrixRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatrixRequest::GetClassData() const { return &_class_data_; }


void MatrixRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatrixRequest*>(&to_msg);
  auto& from = static_cast<const MatrixRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mypackage.MatrixRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ue_max_prb_allocations()->MergeFrom(from._internal_ue_max_prb_allocations());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatrixRequest::CopyFrom(const MatrixRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mypackage.MatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixRequest::IsInitialized() const {
  return true;
}

void MatrixRequest::InternalSwap(MatrixRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_ue_max_prb_allocations()->InternalSwap(other->_internal_mutable_ue_max_prb_allocations());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatrixRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_e2_5fand_5fo1_2eproto_getter, &descriptor_table_e2_5fand_5fo1_2eproto_once,
      file_level_metadata_e2_5fand_5fo1_2eproto[3]);
}
// ===================================================================

class MatrixResponse::_Internal {
 public:
};

MatrixResponse::MatrixResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mypackage.MatrixResponse)
}
MatrixResponse::MatrixResponse(const MatrixResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MatrixResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mypackage.MatrixResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatrixResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatrixResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MatrixResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_e2_5fand_5fo1_2eproto_getter, &descriptor_table_e2_5fand_5fo1_2eproto_once,
      file_level_metadata_e2_5fand_5fo1_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mypackage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mypackage::StreamRequest*
Arena::CreateMaybeMessage< ::mypackage::StreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mypackage::StreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mypackage::StreamResponse*
Arena::CreateMaybeMessage< ::mypackage::StreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mypackage::StreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mypackage::UeMaxPrbAllocation*
Arena::CreateMaybeMessage< ::mypackage::UeMaxPrbAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mypackage::UeMaxPrbAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::mypackage::MatrixRequest*
Arena::CreateMaybeMessage< ::mypackage::MatrixRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mypackage::MatrixRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mypackage::MatrixResponse*
Arena::CreateMaybeMessage< ::mypackage::MatrixResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mypackage::MatrixResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
