// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: e2_and_o1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_e2_5fand_5fo1_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_e2_5fand_5fo1_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_e2_5fand_5fo1_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_e2_5fand_5fo1_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_e2_5fand_5fo1_2eproto;
namespace mypackage {
class MatrixRequest;
struct MatrixRequestDefaultTypeInternal;
extern MatrixRequestDefaultTypeInternal _MatrixRequest_default_instance_;
class MatrixResponse;
struct MatrixResponseDefaultTypeInternal;
extern MatrixResponseDefaultTypeInternal _MatrixResponse_default_instance_;
class StreamRequest;
struct StreamRequestDefaultTypeInternal;
extern StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
class StreamResponse;
struct StreamResponseDefaultTypeInternal;
extern StreamResponseDefaultTypeInternal _StreamResponse_default_instance_;
class UeMaxPrbAllocation;
struct UeMaxPrbAllocationDefaultTypeInternal;
extern UeMaxPrbAllocationDefaultTypeInternal _UeMaxPrbAllocation_default_instance_;
}  // namespace mypackage
PROTOBUF_NAMESPACE_OPEN
template <>
::mypackage::MatrixRequest* Arena::CreateMaybeMessage<::mypackage::MatrixRequest>(Arena*);
template <>
::mypackage::MatrixResponse* Arena::CreateMaybeMessage<::mypackage::MatrixResponse>(Arena*);
template <>
::mypackage::StreamRequest* Arena::CreateMaybeMessage<::mypackage::StreamRequest>(Arena*);
template <>
::mypackage::StreamResponse* Arena::CreateMaybeMessage<::mypackage::StreamResponse>(Arena*);
template <>
::mypackage::UeMaxPrbAllocation* Arena::CreateMaybeMessage<::mypackage::UeMaxPrbAllocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace mypackage {

// ===================================================================


// -------------------------------------------------------------------

class StreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mypackage.StreamRequest) */ {
 public:
  inline StreamRequest() : StreamRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamRequest(const StreamRequest& from);
  StreamRequest(StreamRequest&& from) noexcept
    : StreamRequest() {
    *this = ::std::move(from);
  }

  inline StreamRequest& operator=(const StreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRequest& operator=(StreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRequest* internal_default_instance() {
    return reinterpret_cast<const StreamRequest*>(
               &_StreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamRequest& a, StreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StreamRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StreamRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mypackage.StreamRequest";
  }
  protected:
  explicit StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mypackage.StreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_e2_5fand_5fo1_2eproto;
};// -------------------------------------------------------------------

class StreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mypackage.StreamResponse) */ {
 public:
  inline StreamResponse() : StreamResponse(nullptr) {}
  ~StreamResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamResponse(const StreamResponse& from);
  StreamResponse(StreamResponse&& from) noexcept
    : StreamResponse() {
    *this = ::std::move(from);
  }

  inline StreamResponse& operator=(const StreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamResponse& operator=(StreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamResponse* internal_default_instance() {
    return reinterpret_cast<const StreamResponse*>(
               &_StreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamResponse& a, StreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamResponse& from) {
    StreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mypackage.StreamResponse";
  }
  protected:
  explicit StreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPktDropFieldNumber = 2,
    kUeIndexFieldNumber = 1,
    kPktVolumeFieldNumber = 3,
  };
  // double pkt_drop = 2;
  void clear_pkt_drop() ;
  double pkt_drop() const;
  void set_pkt_drop(double value);

  private:
  double _internal_pkt_drop() const;
  void _internal_set_pkt_drop(double value);

  public:
  // int32 ue_index = 1;
  void clear_ue_index() ;
  ::int32_t ue_index() const;
  void set_ue_index(::int32_t value);

  private:
  ::int32_t _internal_ue_index() const;
  void _internal_set_ue_index(::int32_t value);

  public:
  // int32 pkt_volume = 3;
  void clear_pkt_volume() ;
  ::int32_t pkt_volume() const;
  void set_pkt_volume(::int32_t value);

  private:
  ::int32_t _internal_pkt_volume() const;
  void _internal_set_pkt_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mypackage.StreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double pkt_drop_;
    ::int32_t ue_index_;
    ::int32_t pkt_volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_e2_5fand_5fo1_2eproto;
};// -------------------------------------------------------------------

class UeMaxPrbAllocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mypackage.UeMaxPrbAllocation) */ {
 public:
  inline UeMaxPrbAllocation() : UeMaxPrbAllocation(nullptr) {}
  ~UeMaxPrbAllocation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UeMaxPrbAllocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UeMaxPrbAllocation(const UeMaxPrbAllocation& from);
  UeMaxPrbAllocation(UeMaxPrbAllocation&& from) noexcept
    : UeMaxPrbAllocation() {
    *this = ::std::move(from);
  }

  inline UeMaxPrbAllocation& operator=(const UeMaxPrbAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeMaxPrbAllocation& operator=(UeMaxPrbAllocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UeMaxPrbAllocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UeMaxPrbAllocation* internal_default_instance() {
    return reinterpret_cast<const UeMaxPrbAllocation*>(
               &_UeMaxPrbAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UeMaxPrbAllocation& a, UeMaxPrbAllocation& b) {
    a.Swap(&b);
  }
  inline void Swap(UeMaxPrbAllocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeMaxPrbAllocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UeMaxPrbAllocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UeMaxPrbAllocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UeMaxPrbAllocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UeMaxPrbAllocation& from) {
    UeMaxPrbAllocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeMaxPrbAllocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mypackage.UeMaxPrbAllocation";
  }
  protected:
  explicit UeMaxPrbAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxPrbAllocationFieldNumber = 2,
    kUeIndexFieldNumber = 1,
  };
  // double max_prb_allocation = 2;
  void clear_max_prb_allocation() ;
  double max_prb_allocation() const;
  void set_max_prb_allocation(double value);

  private:
  double _internal_max_prb_allocation() const;
  void _internal_set_max_prb_allocation(double value);

  public:
  // int32 ue_index = 1;
  void clear_ue_index() ;
  ::int32_t ue_index() const;
  void set_ue_index(::int32_t value);

  private:
  ::int32_t _internal_ue_index() const;
  void _internal_set_ue_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mypackage.UeMaxPrbAllocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double max_prb_allocation_;
    ::int32_t ue_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_e2_5fand_5fo1_2eproto;
};// -------------------------------------------------------------------

class MatrixRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mypackage.MatrixRequest) */ {
 public:
  inline MatrixRequest() : MatrixRequest(nullptr) {}
  ~MatrixRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MatrixRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatrixRequest(const MatrixRequest& from);
  MatrixRequest(MatrixRequest&& from) noexcept
    : MatrixRequest() {
    *this = ::std::move(from);
  }

  inline MatrixRequest& operator=(const MatrixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixRequest& operator=(MatrixRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatrixRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatrixRequest* internal_default_instance() {
    return reinterpret_cast<const MatrixRequest*>(
               &_MatrixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MatrixRequest& a, MatrixRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MatrixRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatrixRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatrixRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatrixRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatrixRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatrixRequest& from) {
    MatrixRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mypackage.MatrixRequest";
  }
  protected:
  explicit MatrixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeMaxPrbAllocationsFieldNumber = 1,
  };
  // repeated .mypackage.UeMaxPrbAllocation ue_max_prb_allocations = 1;
  int ue_max_prb_allocations_size() const;
  private:
  int _internal_ue_max_prb_allocations_size() const;

  public:
  void clear_ue_max_prb_allocations() ;
  ::mypackage::UeMaxPrbAllocation* mutable_ue_max_prb_allocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mypackage::UeMaxPrbAllocation >*
      mutable_ue_max_prb_allocations();
  private:
  const ::mypackage::UeMaxPrbAllocation& _internal_ue_max_prb_allocations(int index) const;
  ::mypackage::UeMaxPrbAllocation* _internal_add_ue_max_prb_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mypackage::UeMaxPrbAllocation>& _internal_ue_max_prb_allocations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mypackage::UeMaxPrbAllocation>* _internal_mutable_ue_max_prb_allocations();
  public:
  const ::mypackage::UeMaxPrbAllocation& ue_max_prb_allocations(int index) const;
  ::mypackage::UeMaxPrbAllocation* add_ue_max_prb_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mypackage::UeMaxPrbAllocation >&
      ue_max_prb_allocations() const;
  // @@protoc_insertion_point(class_scope:mypackage.MatrixRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mypackage::UeMaxPrbAllocation > ue_max_prb_allocations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_e2_5fand_5fo1_2eproto;
};// -------------------------------------------------------------------

class MatrixResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mypackage.MatrixResponse) */ {
 public:
  inline MatrixResponse() : MatrixResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MatrixResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatrixResponse(const MatrixResponse& from);
  MatrixResponse(MatrixResponse&& from) noexcept
    : MatrixResponse() {
    *this = ::std::move(from);
  }

  inline MatrixResponse& operator=(const MatrixResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixResponse& operator=(MatrixResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatrixResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatrixResponse* internal_default_instance() {
    return reinterpret_cast<const MatrixResponse*>(
               &_MatrixResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MatrixResponse& a, MatrixResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MatrixResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatrixResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatrixResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatrixResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MatrixResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MatrixResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mypackage.MatrixResponse";
  }
  protected:
  explicit MatrixResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mypackage.MatrixResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_e2_5fand_5fo1_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamRequest

// -------------------------------------------------------------------

// StreamResponse

// int32 ue_index = 1;
inline void StreamResponse::clear_ue_index() {
  _impl_.ue_index_ = 0;
}
inline ::int32_t StreamResponse::ue_index() const {
  // @@protoc_insertion_point(field_get:mypackage.StreamResponse.ue_index)
  return _internal_ue_index();
}
inline void StreamResponse::set_ue_index(::int32_t value) {
  _internal_set_ue_index(value);
  // @@protoc_insertion_point(field_set:mypackage.StreamResponse.ue_index)
}
inline ::int32_t StreamResponse::_internal_ue_index() const {
  return _impl_.ue_index_;
}
inline void StreamResponse::_internal_set_ue_index(::int32_t value) {
  ;
  _impl_.ue_index_ = value;
}

// double pkt_drop = 2;
inline void StreamResponse::clear_pkt_drop() {
  _impl_.pkt_drop_ = 0;
}
inline double StreamResponse::pkt_drop() const {
  // @@protoc_insertion_point(field_get:mypackage.StreamResponse.pkt_drop)
  return _internal_pkt_drop();
}
inline void StreamResponse::set_pkt_drop(double value) {
  _internal_set_pkt_drop(value);
  // @@protoc_insertion_point(field_set:mypackage.StreamResponse.pkt_drop)
}
inline double StreamResponse::_internal_pkt_drop() const {
  return _impl_.pkt_drop_;
}
inline void StreamResponse::_internal_set_pkt_drop(double value) {
  ;
  _impl_.pkt_drop_ = value;
}

// int32 pkt_volume = 3;
inline void StreamResponse::clear_pkt_volume() {
  _impl_.pkt_volume_ = 0;
}
inline ::int32_t StreamResponse::pkt_volume() const {
  // @@protoc_insertion_point(field_get:mypackage.StreamResponse.pkt_volume)
  return _internal_pkt_volume();
}
inline void StreamResponse::set_pkt_volume(::int32_t value) {
  _internal_set_pkt_volume(value);
  // @@protoc_insertion_point(field_set:mypackage.StreamResponse.pkt_volume)
}
inline ::int32_t StreamResponse::_internal_pkt_volume() const {
  return _impl_.pkt_volume_;
}
inline void StreamResponse::_internal_set_pkt_volume(::int32_t value) {
  ;
  _impl_.pkt_volume_ = value;
}

// -------------------------------------------------------------------

// UeMaxPrbAllocation

// int32 ue_index = 1;
inline void UeMaxPrbAllocation::clear_ue_index() {
  _impl_.ue_index_ = 0;
}
inline ::int32_t UeMaxPrbAllocation::ue_index() const {
  // @@protoc_insertion_point(field_get:mypackage.UeMaxPrbAllocation.ue_index)
  return _internal_ue_index();
}
inline void UeMaxPrbAllocation::set_ue_index(::int32_t value) {
  _internal_set_ue_index(value);
  // @@protoc_insertion_point(field_set:mypackage.UeMaxPrbAllocation.ue_index)
}
inline ::int32_t UeMaxPrbAllocation::_internal_ue_index() const {
  return _impl_.ue_index_;
}
inline void UeMaxPrbAllocation::_internal_set_ue_index(::int32_t value) {
  ;
  _impl_.ue_index_ = value;
}

// double max_prb_allocation = 2;
inline void UeMaxPrbAllocation::clear_max_prb_allocation() {
  _impl_.max_prb_allocation_ = 0;
}
inline double UeMaxPrbAllocation::max_prb_allocation() const {
  // @@protoc_insertion_point(field_get:mypackage.UeMaxPrbAllocation.max_prb_allocation)
  return _internal_max_prb_allocation();
}
inline void UeMaxPrbAllocation::set_max_prb_allocation(double value) {
  _internal_set_max_prb_allocation(value);
  // @@protoc_insertion_point(field_set:mypackage.UeMaxPrbAllocation.max_prb_allocation)
}
inline double UeMaxPrbAllocation::_internal_max_prb_allocation() const {
  return _impl_.max_prb_allocation_;
}
inline void UeMaxPrbAllocation::_internal_set_max_prb_allocation(double value) {
  ;
  _impl_.max_prb_allocation_ = value;
}

// -------------------------------------------------------------------

// MatrixRequest

// repeated .mypackage.UeMaxPrbAllocation ue_max_prb_allocations = 1;
inline int MatrixRequest::_internal_ue_max_prb_allocations_size() const {
  return _impl_.ue_max_prb_allocations_.size();
}
inline int MatrixRequest::ue_max_prb_allocations_size() const {
  return _internal_ue_max_prb_allocations_size();
}
inline void MatrixRequest::clear_ue_max_prb_allocations() {
  _internal_mutable_ue_max_prb_allocations()->Clear();
}
inline ::mypackage::UeMaxPrbAllocation* MatrixRequest::mutable_ue_max_prb_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:mypackage.MatrixRequest.ue_max_prb_allocations)
  return _internal_mutable_ue_max_prb_allocations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mypackage::UeMaxPrbAllocation >*
MatrixRequest::mutable_ue_max_prb_allocations() {
  // @@protoc_insertion_point(field_mutable_list:mypackage.MatrixRequest.ue_max_prb_allocations)
  return _internal_mutable_ue_max_prb_allocations();
}
inline const ::mypackage::UeMaxPrbAllocation& MatrixRequest::_internal_ue_max_prb_allocations(int index) const {
  return _internal_ue_max_prb_allocations().Get(index);
}
inline const ::mypackage::UeMaxPrbAllocation& MatrixRequest::ue_max_prb_allocations(int index) const {
  // @@protoc_insertion_point(field_get:mypackage.MatrixRequest.ue_max_prb_allocations)
  return _internal_ue_max_prb_allocations(index);
}
inline ::mypackage::UeMaxPrbAllocation* MatrixRequest::_internal_add_ue_max_prb_allocations() {
  return _internal_mutable_ue_max_prb_allocations()->Add();
}
inline ::mypackage::UeMaxPrbAllocation* MatrixRequest::add_ue_max_prb_allocations() {
  ::mypackage::UeMaxPrbAllocation* _add = _internal_add_ue_max_prb_allocations();
  // @@protoc_insertion_point(field_add:mypackage.MatrixRequest.ue_max_prb_allocations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mypackage::UeMaxPrbAllocation >&
MatrixRequest::ue_max_prb_allocations() const {
  // @@protoc_insertion_point(field_list:mypackage.MatrixRequest.ue_max_prb_allocations)
  return _internal_ue_max_prb_allocations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mypackage::UeMaxPrbAllocation>&
MatrixRequest::_internal_ue_max_prb_allocations() const {
  return _impl_.ue_max_prb_allocations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mypackage::UeMaxPrbAllocation>*
MatrixRequest::_internal_mutable_ue_max_prb_allocations() {
  return &_impl_.ue_max_prb_allocations_;
}

// -------------------------------------------------------------------

// MatrixResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mypackage


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_e2_5fand_5fo1_2eproto_2epb_2eh
